version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_AI_SERVICE_URL=http://localhost:8001
      - REACT_APP_WEBSOCKET_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
      - ai-services
    networks:
      - medical-network

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://medical_user:medical_password@postgres:5432/medical_db
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-key
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
    networks:
      - medical-network

  # AI Services (Python FastAPI)
  ai-services:
    build:
      context: ./ai-services
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://medical_user:medical_password@postgres:5432/medical_db
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./ai-services:/app
      - ./medical-imaging:/app/medical-imaging
    depends_on:
      - postgres
      - redis
    networks:
      - medical-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=medical_user
      - POSTGRES_PASSWORD=medical_password
      - POSTGRES_DB=medical_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - medical-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - medical-network

  # NGINX Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
      - ai-services
    networks:
      - medical-network

  # Medical Image Processing Service
  medical-imaging:
    build:
      context: ./medical-imaging
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://medical_user:medical_password@postgres:5432/medical_db
    volumes:
      - ./medical-imaging:/app
      - medical_images:/app/images
    depends_on:
      - postgres
    networks:
      - medical-network

volumes:
  postgres_data:
  redis_data:
  medical_images:

networks:
  medical-network:
    driver: bridge
# Old configuration is replaced with a detailed new layout including multiple services.
